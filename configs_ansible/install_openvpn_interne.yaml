- name: Déployer OpenVPN Interne avec authentification LDAP
  hosts: localhost
  become: true

  vars:
    extension: "com"
    entreprise: "monentreprise"
    fqdn: "{{ entreprise }}.{{ extension }}"
    openvpn_path: "{{ playbook_dir }}/openvpn-interne"
    cert_path: "{{ playbook_dir }}/cert"
    
    # LDAP configuration
    ldap_host: "192.168.20.20"
    ldap_port: "389"
    ldap_admin_dn: "cn=admin,dc={{ entreprise }},dc={{ extension }}"
    ldap_admin_password: "password"
    ldap_base_dn: "dc={{ entreprise }},dc={{ extension }}"
    
    # OpenVPN configuration
    openvpn_interne_port: "1194"
    openvpn_interne_subnet: "10.8.0.0"
    openvpn_interne_netmask: "255.255.255.0"
    openvpn_interne_ip: "192.168.20.20"
    
    # Utilisateurs de test
    test_users:
      - { username: "user1", password: "password1", group: "VPN_INTERNE" }

  tasks:
    - name: Créer les dossiers nécessaires pour OpenVPN Interne
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ openvpn_path }}"
        - "{{ openvpn_path }}/config"
        - "{{ openvpn_path }}/data"
        - "{{ openvpn_path }}/clients"
        - "{{ cert_path }}"

    - name: Vérifier que le réseau Docker "lldap" existe
      shell: docker network inspect lldap || docker network create lldap
      register: lldap_network_result
      changed_when: "'Created' in lldap_network_result.stdout"

    - name: Vérifier que LDAP est accessible
      wait_for:
        host: "{{ ldap_host }}"
        port: "{{ ldap_port }}"
        timeout: 30
      ignore_errors: true
      register: ldap_check

    - name: Installer OpenVPN (pour générer les clés TLS-Auth)
      apt:
        name: openvpn
        state: present
        update_cache: yes

    - name: Nettoyer la configuration et le conteneur OpenVPN Interne existant
      shell: |
        docker rm -f openvpn-interne || true
        rm -rf {{ openvpn_path }}/config/*
      ignore_errors: true

    - name: Initialiser OpenVPN Interne
      shell: |
        # Créer le fichier ovpn_env.sh manuellement
        cat > {{ openvpn_path }}/config/ovpn_env.sh << EOF
        declare -x OVPN_AUTH="SHA256"
        declare -x OVPN_CIPHER="AES-256-CBC"
        declare -x OVPN_CLIENT_TO_CLIENT="false"
        declare -x OVPN_CN="{{ fqdn }}"
        declare -x OVPN_COMP_LZO="false"
        declare -x OVPN_DEFROUTE="1"
        declare -x OVPN_DEVICE="tun"
        declare -x OVPN_DNS="1"
        declare -x OVPN_ENV="/etc/openvpn/ovpn_env.sh"
        declare -x OVPN_FRAGMENT=""
        declare -x OVPN_MTU=""
        declare -x OVPN_NAT="0"
        declare -x OVPN_PORT="{{ openvpn_interne_port }}"
        declare -x OVPN_PROTO="udp"
        declare -x OVPN_PUSH="route 192.168.20.0 255.255.255.0"
        declare -x OVPN_SERVER="{{ openvpn_interne_subnet }}/24"
        declare -x OVPN_SERVER_URL="udp://{{ fqdn }}:{{ openvpn_interne_port }}"
        declare -x OVPN_TLS_CIPHER=""
        EOF
        
        chmod 755 {{ openvpn_path }}/config/ovpn_env.sh
      args:
        creates: "{{ openvpn_path }}/config/ovpn_env.sh"

    - name: Générer les certificats et clés pour OpenVPN INTERNE
      shell: |
        # Initialiser la configuration OpenVPN
        docker run -v {{ openvpn_path }}/config:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://{{ fqdn }}:{{ openvpn_interne_port }} -r {{ openvpn_interne_subnet }}/24 -p "route 192.168.20.0 255.255.255.0"
        docker run -v {{ openvpn_path }}/config:/etc/openvpn --rm -e EASYRSA_BATCH=1 kylemanna/openvpn ovpn_initpki nopass
      args:
        creates: "{{ openvpn_path }}/config/openvpn.conf"
        
    - name: Modifier la configuration OpenVPN INTERNE pour ajouter LDAP
      lineinfile:
        path: "{{ openvpn_path }}/config/openvpn.conf"
        line: "plugin /usr/lib/openvpn/plugins/openvpn-plugin-auth-ldap.so /etc/openvpn/auth/ldap-interne.conf"
        insertafter: "^dev tun"

    - name: Ajouter verify-client-cert none à la configuration
      lineinfile:
        path: "{{ openvpn_path }}/config/openvpn.conf"
        line: "verify-client-cert none"
        insertafter: "plugin /usr/lib/openvpn/plugins/openvpn-plugin-auth-ldap.so"

    - name: Ajouter username-as-common-name à la configuration
      lineinfile:
        path: "{{ openvpn_path }}/config/openvpn.conf"
        line: "username-as-common-name"
        insertafter: "verify-client-cert none"

    - name: Créer le répertoire pour la configuration LDAP
      file:
        path: "{{ openvpn_path }}/config/auth"
        state: directory
        mode: '0755'

    - name: Créer la configuration LDAP pour OpenVPN INTERNE
      copy:
        dest: "{{ openvpn_path }}/config/auth/ldap-interne.conf"
        mode: '0644'
        content: |
          <LDAP>
            URL ldap://{{ ldap_host }}:{{ ldap_port }}
            BindDN {{ ldap_admin_dn }}
            Password {{ ldap_admin_password }}
            Timeout 15
            TLSEnable no
          </LDAP>
          
          <Authorization>
            BaseDN "{{ ldap_base_dn }}"
            SearchFilter "(&(objectClass=posixAccount)(uid=%u)(memberOf=cn=VPN_INTERNE,ou=groups,{{ ldap_base_dn }}))"
            RequireGroup false
          </Authorization>

    - name: Créer le Dockerfile pour OpenVPN avec LDAP
      copy:
        dest: "{{ openvpn_path }}/Dockerfile"
        mode: '0644'
        content: |
          FROM kylemanna/openvpn:latest
          
          # Installation des dépendances pour le plugin LDAP
          RUN apk add --no-cache openvpn-auth-ldap openldap-dev
          
          # Créer les répertoires nécessaires
          RUN mkdir -p /var/log/openvpn /etc/openvpn/logs
          RUN ln -sf /dev/stdout /var/log/openvpn/openvpn.log
          
          # Vérification que le plugin est bien installé
          RUN ls -la /usr/lib/openvpn/plugins/

    - name: Construire l'image Docker personnalisée
      shell: |
        cd {{ openvpn_path }}
        docker build -t openvpn-ldap-interne:latest .

    - name: Créer docker-compose.yml pour OpenVPN Interne
      copy:
        dest: "{{ openvpn_path }}/docker-compose.yml"
        mode: '0644'
        content: |
          services:
            openvpn-interne:
              container_name: openvpn-interne
              image: openvpn-ldap-interne:latest
              cap_add:
                - NET_ADMIN
              ports:
                - "{{ openvpn_interne_port }}:{{ openvpn_interne_port }}/udp"
              volumes:
                - ./config:/etc/openvpn
                - ./config/auth:/etc/openvpn/auth
              restart: always
              networks:
                - lldap
              environment:
                - OVPN_SERVER_IP={{ openvpn_interne_ip }}
          
          networks:
            lldap:
              external: true

    - name: Démarrer le conteneur OpenVPN Interne
      command: docker compose up -d
      args:
        chdir: "{{ openvpn_path }}"

    - name: Attendre que le conteneur OpenVPN Interne soit prêt
      pause:
        seconds: 10

    - name: Générer un certificat client générique
      shell: docker run -v {{ openvpn_path }}/config:/etc/openvpn --rm -e EASYRSA_BATCH=1 kylemanna/openvpn easyrsa build-client-full client nopass
      args:
        creates: "{{ openvpn_path }}/config/pki/issued/client.crt"
        
    - name: Générer le fichier de configuration client OpenVPN Interne
      shell: docker run -v {{ openvpn_path }}/config:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient client > {{ openvpn_path }}/client-interne.ovpn
      args:
        creates: "{{ openvpn_path }}/client-interne.ovpn"
      
    - name: Ajouter l'authentification LDAP au fichier de configuration client
      lineinfile:
        path: "{{ openvpn_path }}/client-interne.ovpn"
        insertafter: "remote-cert-tls server"
        line: "auth-user-pass\n# Utilisez vos identifiants LDAP pour vous connecter\n# Groupe requis : VPN_INTERNE"
      register: ovpn_config_interne

    - name: Afficher l'emplacement du fichier de configuration client Interne
      debug:
        msg: "Le fichier de configuration client Interne est disponible dans {{ openvpn_path }}/client-interne.ovpn"

    - name: Créer un script pour générer des configurations client Interne
      copy:
        dest: "{{ openvpn_path }}/generate-client-config.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          
          # Script pour générer une configuration client OpenVPN Interne
          
          if [ $# -ne 1 ]; then
            echo "Usage: $0 <username>"
            exit 1
          fi
          
          USERNAME=$1
          OUTPUT_DIR="{{ openvpn_path }}/clients"
          OUTPUT_FILE="$OUTPUT_DIR/${USERNAME}-interne.ovpn"
          
          # Vérifier si l'utilisateur existe dans LDAP
          docker exec lldap ldapsearch -x \
            -H ldap://{{ ldap_host }}:{{ ldap_port }} \
            -D "{{ ldap_admin_dn }}" \
            -w "{{ ldap_admin_password }}" \
            -b "{{ ldap_base_dn }}" "(uid=$USERNAME)" > /dev/null
          
          if [ $? -ne 0 ]; then
            echo "L'utilisateur $USERNAME n'existe pas dans LDAP"
            exit 1
          fi
          
          # Vérifier le groupe VPN
          GROUP="VPN_INTERNE"
          
          docker exec lldap ldapsearch -x \
            -H ldap://{{ ldap_host }}:{{ ldap_port }} \
            -D "{{ ldap_admin_dn }}" \
            -w "{{ ldap_admin_password }}" \
            -b "{{ ldap_base_dn }}" "(&(cn=$GROUP)(memberUid=$USERNAME))" > /dev/null
          
          if [ $? -ne 0 ]; then
            echo "L'utilisateur $USERNAME n'est pas membre du groupe $GROUP"
            exit 1
          fi
          
          # Générer la configuration client
          # Note: Nous utilisons maintenant un certificat générique 'client' au lieu de 'user1'
          cp {{ openvpn_path }}/client-interne.ovpn "$OUTPUT_FILE"
          
          echo "Configuration générée pour $USERNAME dans $OUTPUT_FILE"
          echo "Utilisez les identifiants LDAP pour vous connecter."
